{
	"info": {
		"_postman_id": "f2e633db-7252-4580-b8ba-c5662c95861d",
		"name": "capstone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "/resetdata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/resetdata",
							"host": [
								"{{host}}"
							],
							"path": [
								"resetdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://phucnguyen.us.auth0.com/oauth/token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\":\"yGPLAtm4M7Rwbftw6vmcVQfCW7tJRZEm\",\n    \"client_secret\":\"Fz4xDR8DOdg5lHP35VUyJDAccc49PEUMAGlpkDtnCD-Yk59FBt0Ll4VOq0lcE7kM\",\n    \"audience\":\"phuc\",\n    \"grant_type\":\"client_credentials\"\n}\n"
						},
						"url": {
							"raw": "https://phucnguyen.us.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"phucnguyen",
								"us",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikh6MzRpZzNDMjB2TDdvR09tc1RoNiJ9.eyJpc3MiOiJodHRwczovL3BodWNuZ3V5ZW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDY0YmFlYWQ4M2QzYWI3YjRlMjM4YzNlNSIsImF1ZCI6InBodWMiLCJpYXQiOjE2OTAwMDI4ODMsImV4cCI6MTY5MDA4OTI4MywiYXpwIjoiSjgwNFR1bWd0RVBKOVNyME1ZNm9wV0l1M1NtZ1JPTTkiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImFkbWluIl19.S-GYPDnschEsZRiQijSKznn9tLFTLn4ICgV_1z_Gi-a1FcCQSsEagxypelfmHOv__d0PpAnlr1imFuhIo91MgovAb1bh_WmxATaSKYUjQAwzUziq-sZoLFlzWstZRtQ0LT43h_rmhRLecg0aFdV9D_1NZdbZV5rzsKPwxdL6hg5AquZsr7Rd8ihwrovCce3gtFp0ceKJmdMd0Gn3IHAKFhe6kuTXaCrHke803prbhTCv7SKuOoCRvFxWczHvm0Uk324HqAoB068mX2liF4eaWgMBkuRZKP5Wh5t3gy-x7b6IYJBJD6PcO4UKr--DvAqcTLqXXPjjbuwDz3lTjzvDdw",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DealerManager",
			"item": [
				{
					"name": "01 - /models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains models array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.models).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/models",
							"host": [
								"{{host}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "02 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains makes array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "03 - /makes/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"make name should be Alfa Romeo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Alfa Romeo')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make_name\" : \"Al\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "04 - /makes/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"make name should be `Acura 2023`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Acura 2023')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Acura 2023\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "05 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"new make name should be `Honda`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].name).to.eql('Honda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Honda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "06 - /models/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"new model name should be `new Hoda model 2026`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].models[0].name).to.eql('new Hoda model 2026')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"new Hoda model 2026\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/models/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"models",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "07 - /makes/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"value contains makes array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/makes/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikh6MzRpZzNDMjB2TDdvR09tc1RoNiJ9.eyJpc3MiOiJodHRwczovL3BodWNuZ3V5ZW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDY0YjczMmMxZmE2NGU3ZjIwZTYxMTZmMyIsImF1ZCI6InBodWMiLCJpYXQiOjE2OTAwMDI4MjUsImV4cCI6MTY5MDA4OTIyNSwiYXpwIjoiSjgwNFR1bWd0RVBKOVNyME1ZNm9wV0l1M1NtZ1JPTTkiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImRlbGV0ZTp2ZWhpY2xlcyIsImdldDp2ZWhpY2xlcyIsInBhdGNoOnZlaGljbGVzIiwicG9zdDp2ZWhpY2xlcyJdfQ.UXp0DnG1y3yG8e9mIfpv4u3EzgSwx9J6niAA5yQqeNSnS9Pa0k9vinZUen6KuY09ACzbCn5wfjK883HwBh2tUMtwwKaYDtq-NYXiBJ454HwsjALIAQ4fIBd_fNrLfzRSo7jmhlH--wWRZJQfhdrAhCQY6MVCtUkY26I-EuamyLTSDdEbzGbwMKs7eTjY4L0IxZjeHoR6ylMAj_Z8xS8AUzrL2vFUAisen__8H_aiD9KPCMHdH2q7_0HSmwqZt5Hv7JXcOleryBgvunoq4xl_Tu3SNJJttm-1oP8TrkDGXSzMXxUXcK9YaYL3SE2H4ZrwKD8dKf4lM8nwqIoZH5M-NA",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Dealer - Sale",
			"item": [
				{
					"name": "01 - /models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"value contains models array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.models).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/models",
							"host": [
								"{{host}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "02 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"value contains makes array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "03 - /makes/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"make name should be Alfa Romeo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Alfa Romeo')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make_name\" : \"Al\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "04 - /makes/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"make name should be `Acura 2023`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Acura 2023')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Acura 2023\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "05 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"new make name should be `Honda`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].name).to.eql('Honda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Honda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "06 - /models/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"new model name should be `new Hoda model 2026`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].models[0].name).to.eql('new Hoda model 2026')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"new Hoda model 2026\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/models/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"models",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "07 - /makes/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", ",
									"function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(403)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/makes/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikh6MzRpZzNDMjB2TDdvR09tc1RoNiJ9.eyJpc3MiOiJodHRwczovL3BodWNuZ3V5ZW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDY0YjcyMThjM2RkNGZhNTQ1Nzk4YWNiYiIsImF1ZCI6InBodWMiLCJpYXQiOjE2OTAwMDI0MTEsImV4cCI6MTY5MDA4ODgxMSwiYXpwIjoiSjgwNFR1bWd0RVBKOVNyME1ZNm9wV0l1M1NtZ1JPTTkiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImdldDp2ZWhpY2xlcyIsInBhdGNoOnZlaGljbGVzIiwicG9zdDp2ZWhpY2xlcyJdfQ.W3OIJ1vbTxJl4gphi4EMcl-ex8mXhqs6-0TjyD9k7bXrd5yQNoCPDs8tkUAmw7wKcXfVL5peVSlp3RWEWJDD7qvR9z_RcAvqZMRiFgeydYyjFrHEu6g0C9NW6l8TMg3URtVz3Oi1rXlJbsfmiLM5ZhzSMXeugjxtwZPojGCjb_ZHfAr42yHs7ZsJuDvErcJAejzIZLX0qPM_9YDbU1WgN5xdfVbLcor73HM9VfSUuvhttQCHQpHvwkQyDVVvghawU7Er2xydfmDSx5s24DefzCcKLK5etrguTNnZEnNmE6FX3Lx42-XikwrD5Ay4SLlu6bpIgC71C2Qcckqh4A_JbA",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000",
			"type": "string"
		}
	]
}