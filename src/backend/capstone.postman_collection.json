{
	"info": {
		"_postman_id": "f2e633db-7252-4580-b8ba-c5662c95861d",
		"name": "capstone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "/resetdata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/resetdata",
							"host": [
								"{{host}}"
							],
							"path": [
								"resetdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://phucnguyen.us.auth0.com/oauth/token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\":\"yGPLAtm4M7Rwbftw6vmcVQfCW7tJRZEm\",\n    \"client_secret\":\"Fz4xDR8DOdg5lHP35VUyJDAccc49PEUMAGlpkDtnCD-Yk59FBt0Ll4VOq0lcE7kM\",\n    \"audience\":\"phuc\",\n    \"grant_type\":\"client_credentials\"\n}\n"
						},
						"url": {
							"raw": "https://phucnguyen.us.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"phucnguyen",
								"us",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikh6MzRpZzNDMjB2TDdvR09tc1RoNiJ9.eyJpc3MiOiJodHRwczovL3BodWNuZ3V5ZW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDY0YmFlYWQ4M2QzYWI3YjRlMjM4YzNlNSIsImF1ZCI6InBodWMiLCJpYXQiOjE2ODk5NzE2MzAsImV4cCI6MTY5MDA1ODAzMCwiYXpwIjoiSjgwNFR1bWd0RVBKOVNyME1ZNm9wV0l1M1NtZ1JPTTkiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImFkbWluIl19.FIsgHQ9AC3D2_KhCeuk5J1KRQcS2vnkuaiorZwkvCwtcK4ssiRp_LdUEOo0id3eQuLMrPdqJg_ixc-3aByXplKX5gUNDI2d0hMTVw1nryTBOykZy6pK3dIylYJ93pl2-JDJABDbkgJIzssSrwJrt4XA8xB55tfjswpLerxmSGr6-O5pJSeqWPpTueGjG_w3ZRODomWQKHZHK_C6bH3AJMbPoaxVkAdBxQu9e-4KSajUq20lPSd4budRvSRfior5P9kBbOfqAc6PpMUWvL8cN8AwChIKQ1wduBvlXqcxHaZcchpfyoOtEWkbaH9Q9IXNZG1c1j1626szHIw-K_r0iYg",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DealerManager",
			"item": [
				{
					"name": "01 - /models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains models array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.models).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/models",
							"host": [
								"{{host}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "02 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains makes array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "03 - /makes/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"make name should be Alfa Romeo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Alfa Romeo')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make_name\" : \"Al\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "04 - /makes/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"make name should be `Acura 2023`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Acura 2023')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Acura 2023\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "05 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"new make name should be `Honda`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].name).to.eql('Honda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Honda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "06 - /models/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"new model name should be `new Hoda model 2026`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].models[0].name).to.eql('new Hoda model 2026')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"new Hoda model 2026\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/models/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"models",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "07 - /makes/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"value contains makes array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/makes/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikh6MzRpZzNDMjB2TDdvR09tc1RoNiJ9.eyJpc3MiOiJodHRwczovL3BodWNuZ3V5ZW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDY0YjczMmMxZmE2NGU3ZjIwZTYxMTZmMyIsImF1ZCI6InBodWMiLCJpYXQiOjE2ODk5NzE4NDksImV4cCI6MTY5MDA1ODI0OSwiYXpwIjoiSjgwNFR1bWd0RVBKOVNyME1ZNm9wV0l1M1NtZ1JPTTkiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImRlbGV0ZTp2ZWhpY2xlcyIsImdldDp2ZWhpY2xlcyIsInBhdGNoOnZlaGljbGVzIiwicG9zdDp2ZWhpY2xlcyJdfQ.piONGFPrNQDiXjaF2huDqgOVmQDAav-2xSX5MWXqSEOrNzKH_J55L64hWqTT2U0A3YORtVGsJ3bIMtCNsSYw3k_R06ycjuF078_gm0KRHrn4E_7SG3aZuZr-rS06y70Tssq6TMHwv8s8iKr79m4XrAx8hKMScZz1slzqRZRQK5sqUVD9OZRKXKNc2IiSSrGMlPE7AAJGw-iSMOrtrXkjWq-gNW4CYMRkUWnTTahUz9mWdW69zXUB_2RWMAiXIQzsZ9yy-qMLvDpnPeUEOZFYBJ-HPI01W_OKmycox_WOWsLf6D5iCVvYK5VVt41EkB4ZHKxGeV9r--5AF-W4T9Fl_g",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Dealer - Sale",
			"item": [
				{
					"name": "01 - /models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"value contains models array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.models).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/models",
							"host": [
								"{{host}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "02 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"value contains makes array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "03 - /makes/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"make name should be Alfa Romeo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Alfa Romeo')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make_name\" : \"Al\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/search",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "04 - /makes/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"make name should be `Acura 2023`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[0].name).to.eql('Acura 2023')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Acura 2023\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "05 - /makes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"new make name should be `Honda`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].name).to.eql('Honda')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Honda\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/makes",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes"
							]
						}
					},
					"response": []
				},
				{
					"name": "06 - /models/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"new model name should be `new Hoda model 2026`\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.makes).to.be.an('array')",
									"    pm.expect(jsonData.makes[2].models[0].name).to.eql('new Hoda model 2026')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"new Hoda model 2026\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/models/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"models",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "07 - /makes/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", ",
									"function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(403)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/makes/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"makes",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikh6MzRpZzNDMjB2TDdvR09tc1RoNiJ9.eyJpc3MiOiJodHRwczovL3BodWNuZ3V5ZW4udXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDY0YjcyMThjM2RkNGZhNTQ1Nzk4YWNiYiIsImF1ZCI6InBodWMiLCJpYXQiOjE2ODk5NzE3NTksImV4cCI6MTY5MDA1ODE1OSwiYXpwIjoiSjgwNFR1bWd0RVBKOVNyME1ZNm9wV0l1M1NtZ1JPTTkiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImdldDp2ZWhpY2xlcyIsInBhdGNoOnZlaGljbGVzIiwicG9zdDp2ZWhpY2xlcyJdfQ.UHjrQld6PCB_V0yuGyE5x1-RTZRa1PIOmRcs5S5-8fxiHa6WwirqxWxwmHtyX3EdBwcJMQG8auZJCyrvbLLqvcb2zvxF_GSaKr18hRdEPPDXSzy0WCuJjPM7cFqI657RjDlvYm0gDdrKetPUgsLXwQq4IQd8iKe6ja-jhSaVxHdpGsy7LPqrVApPh-6WBiocVkOwj5Kb5t6kAkE_F7lZoBe2Xj8qUNMBQQO72j5yeKiBoXAWY79StL_s-mKlx68Malt9_Fx4AsW-dHRczcTLm2yFZEezxFsQYi7NrkNGkoMBK9TdAZUdSjjhGxAobm7tKMbOGulsrGaDq_KobjC2nA",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000",
			"type": "string"
		}
	]
}